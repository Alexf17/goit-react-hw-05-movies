{"version":3,"file":"static/js/387.276d0697.chunk.js","mappings":"8SAEAA,EAAAA,GAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAM,mCAEL,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,6GAEoBF,EAAAA,GAAAA,IAAA,sCAAyCC,IAF7D,cAEGE,EAFH,yBAGIA,EAASC,KAAKC,SAHlB,gCAKHC,QAAQC,IAAR,MALG,gFASA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,gGAEoBT,EAAAA,GAAAA,IAAA,+BACGC,EADH,iCAC+BQ,EAD/B,gCAFpB,cAEGN,EAFH,yBAKIA,EAASC,KAAKC,SALlB,gCAOHC,QAAQC,IAAR,MAPG,gFAWA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAAmCC,GAAnC,gGAEoBX,EAAAA,GAAAA,IAAA,iBACXW,EADW,oBACQV,EADR,oBAFpB,cAEGE,EAFH,OAKHG,QAAQC,MALL,kBAMIJ,EAASC,MANb,gCAQHE,QAAQC,IAAR,MARG,gFAWA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAAgCD,GAAhC,gGAEoBX,EAAAA,GAAAA,IAAA,iBACXW,EADW,4BACgBV,EADhB,oBAFpB,cAEGE,EAFH,yBAKIA,EAASC,KAAKS,MALlB,gCAOHP,QAAQC,IAAR,MAPG,gFAWA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAAmCH,GAAnC,gGAEoBX,EAAAA,GAAAA,IAAA,gBACZW,EADY,4BACeV,EADf,2BAFpB,cAEGE,EAFH,yBAMIA,EAASC,KAAKC,SANlB,gCAQHC,QAAQC,IAAR,MARG,gF,0KC7CMQ,EAAKC,EAAAA,GAAAA,GAAH,iLAQFC,EAAKD,EAAAA,GAAAA,GAAH,qEAIFE,EAAMF,EAAAA,GAAAA,IAAH,0DAKHG,EAAOH,EAAAA,GAAAA,IAAH,0CAGJI,EAAYJ,EAAAA,GAAAA,EAAH,iE,SC8BtB,EA5Ca,WACX,IAAQL,GAAYU,EAAAA,EAAAA,MAAZV,QACR,GAAgCW,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KAFiB,wCAIjB,WAA8BC,GAA9B,wFAC2Bb,EAAAA,EAAAA,IAAiBa,GAD5C,WACQC,EADR,QAGkBC,OAHlB,iDAMEH,EAAYE,GANd,4CAJiB,sBAkBjB,OALAE,EAAAA,EAAAA,YAAU,YAbO,oCAcfC,CAAelB,EAEhB,GAAE,CAACA,KAGF,SAACQ,EAAD,UACuB,IAApBI,EAASI,QACR,SAACP,EAAD,wDAEA,SAACL,EAAD,UACGQ,EAASO,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,aAAcC,EAAvB,EAAuBA,UAAvB,OACZ,UAAChB,EAAD,YACE,SAACC,EAAD,CACEgB,IACEF,EAAY,yCAC0BA,GAClCG,EAENC,IAAKL,KAEP,kCAAUA,MACV,uCAAeE,OAVRF,EADG,OAkBvB,C","sources":["api/apiService.jsx","components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst KEY = '07c817eca0f88df46ceed4174b3720d7';\n\nexport async function searchTrendingMovies() {\n  try {\n    const response = await axios.get(`/trending/movie/day?api_key=${KEY}`);\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function searchMovies(query) {\n  try {\n    const response = await axios.get(\n      `search/movie?api_key=${KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function searchMoviesDetails(movieId) {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}?api_key=${KEY}&language=en-US`\n    );\n    console.log();\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport async function searchMoviesCast(movieId) {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n    );\n    return response.data.cast;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function searchMoviesReviews(movieId) {\n  try {\n    const response = await axios.get(\n      `movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`\n    );\n    // console.log(response.data.results);\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n}\n","import styled from 'styled-components';\n\nexport const Ul = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(5, 1fr);\n  grid-auto-rows: minmax(400px, auto);\n  grid-gap: 25px;\n  margin: 0 auto;\n  padding: 0;\n`;\nexport const Li = styled.li`\n  overflow: hidden;\n  border-radius: 20px;\n`;\nexport const Img = styled.img`\n  width: 100%;\n  height: 350px;\n`;\n\nexport const Wrap = styled.div`\n  padding: 20px;\n`;\nexport const ErrorText = styled.p`\n  margin-top: 20px;\n  font-size: 30px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { searchMoviesCast } from 'api/apiService';\nimport poster from '../../img/no_poster.jpg';\n\nimport { ErrorText, Img, Li, Ul, Wrap } from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [castList, setCastList] = useState([]);\n\n  async function createCastList(id) {\n    const listActors = await searchMoviesCast(id);\n\n    if (!listActors.length) {\n      return;\n    }\n    setCastList(listActors);\n  }\n\n  useEffect(() => {\n    createCastList(movieId);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [movieId]);\n\n  return (\n    <Wrap>\n      {castList.length === 0 ? (\n        <ErrorText>Sorry, but the data is not yet available</ErrorText>\n      ) : (\n        <Ul>\n          {castList.map(({ name, profile_path, character }) => (\n            <Li key={name}>\n              <Img\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                    : poster\n                }\n                alt={name}\n              />\n              <p>Name: {name}</p>\n              <p>Character: {character}</p>\n            </Li>\n          ))}\n        </Ul>\n      )}\n    </Wrap>\n  );\n};\n\nexport default Cast;\n"],"names":["axios","KEY","searchTrendingMovies","response","data","results","console","log","searchMovies","query","searchMoviesDetails","movieId","searchMoviesCast","cast","searchMoviesReviews","Ul","styled","Li","Img","Wrap","ErrorText","useParams","useState","castList","setCastList","id","listActors","length","useEffect","createCastList","map","name","profile_path","character","src","poster","alt"],"sourceRoot":""}