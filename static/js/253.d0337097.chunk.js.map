{"version":3,"file":"static/js/253.d0337097.chunk.js","mappings":"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","sources":["api1/1apiService.jsx","components/SearchForm/SearchForm.styled.js","components/SearchForm/SearchForm.jsx","pages/Movies/Movies.styled.js","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst KEY = '07c817eca0f88df46ceed4174b3720d7';\n\nexport async function searchTrendingMovies() {\n  try {\n    const response = await axios.get(`/trending/movie/day?api_key=${KEY}`);\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function searchMovies(query) {\n  try {\n    const response = await axios.get(\n      `search/movie?api_key=${KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function searchMoviesDetails(movieId) {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}?api_key=${KEY}&language=en-US`\n    );\n    console.log();\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport async function searchMoviesCast(movieId) {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n    );\n    return response.data.cast;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function searchMoviesReviews(movieId) {\n  try {\n    const response = await axios.get(\n      `movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`\n    );\n    // console.log(response.data.results);\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n}\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  width: 600px;\n  display: flex;\n  align-items: center;\n  margin-bottom: 30px;\n  flex-direction: row;\n  justify-content: center;\n`;\n\nexport const SubmitButton = styled.button`\n  cursor: pointer;\n  background-color: #38539f;\n  padding: 10px 20px;\n  border-radius: 5px;\n  font-size: 20px;\n\n  &:hover,\n  &:focus {\n    background-color: #a39cf4;\n  }\n`;\n\nexport const Input = styled.input`\n  height: 41px;\n  width: 100%;\n  background-color: #38539f;\n  font-size: 20px;\n  padding-left: 15px;\n  border-radius: 5px;\n\n  &:hover,\n  &:focus {\n    background-color: #a39cf4;\n  }\n`;\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Input, SubmitButton } from './SearchForm.styled';\n\nexport const SearchForm = ({ onSubmit }) => {\n  const [query, setQuery] = useState('');\n\n  const changeInput = e => {\n    const inputData = e.target.value.trim().toLowerCase();\n    setQuery(inputData);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (!query) {\n      alert('You forgot to enter a request');\n      return;\n    }\n    onSubmit(query);\n    reset();\n  };\n\n  const reset = () => {\n    setQuery('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <label>\n        <Input\n          autoFocus\n          type=\"text\"\n          autoComplete=\"off\"\n          placeholder=\"Search movies???\"\n          onChange={changeInput}\n          value={query}\n        />\n      </label>\n      <SubmitButton type=\"submit\">Search</SubmitButton>\n    </Form>\n  );\n};\n\nSearchForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const SearchWrap = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\nexport const Ul = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  grid-auto-rows: minmax(400px, auto);\n  grid-gap: 25px;\n  margin: 0 auto;\n  padding: 0;\n`;\n\nexport const Li = styled.li`\n  overflow: hidden;\n  border-radius: 10px;\n`;\nexport const Img = styled.img`\n  width: 100%;\n  height: 450px;\n`;\n\nexport const FilmTitle = styled.p`\n  font-size: 17px;\n  font-style: italic;\n  font-weight: 600;\n  color: #c13418;\n  margin: 0 auto;\n  display: table;\n`;\n","import { useState, useEffect } from 'react';\nimport { SearchForm } from '../../components/SearchForm/SearchForm';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport { searchMovies } from '../../api1/1apiService';\nimport { NavLink } from 'react-router-dom';\nimport { FilmTitle, Img, Li, SearchWrap, Ul } from './Movies.styled';\nimport poster from '../../img/no_poster.jpg';\n\nconst Movies = () => {\n  const [query, setQuery] = useState('');\n  const [searchParam, setSearchParam] = useSearchParams();\n  const search = searchParam.get('query') ?? '';\n  // const [isLoading, setIsLoading] = useState(false);\n  const [films, setFilms] = useState([]);\n  const location = useLocation();\n\n  const newQuery = value => {\n    if (value === query) {\n      return;\n    }\n    setQuery(value);\n    setSearchParam(value !== '' ? { query: value } : {});\n  };\n\n  async function getFilms(value) {\n    try {\n      setFilms([]);\n      // setIsLoading(true);\n\n      const filmList = await searchMovies(value);\n      if (!filmList.length) {\n        return;\n      }\n\n      setFilms(filmList);\n    } catch (error) {\n      console.log(error);\n    }\n    // setIsLoading(false);\n  }\n\n  useEffect(() => {\n    if (search) {\n      setQuery(search);\n    }\n    if (!query) {\n      return;\n    }\n    getFilms(query);\n  }, [query, search]);\n\n  return (\n    <>\n      <SearchWrap>\n        <SearchForm onSubmit={newQuery} />\n      </SearchWrap>\n      <Ul>\n        {films.map(film => (\n          <Li key={film.id}>\n            <NavLink\n              id={film.id}\n              to={`/movies/${film.id}`}\n              state={{ from: location }}\n            >\n              <Img\n                src={\n                  film.poster_path\n                    ? `https://image.tmdb.org/t/p/w500${film.poster_path}`\n                    : poster\n                }\n              />\n              <FilmTitle>{film.title}</FilmTitle>\n            </NavLink>\n          </Li>\n        ))}\n      </Ul>\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["axios","KEY","searchTrendingMovies","response","data","results","console","log","searchMovies","query","searchMoviesDetails","movieId","searchMoviesCast","cast","searchMoviesReviews","Form","styled","SubmitButton","Input","SearchForm","onSubmit","useState","setQuery","reset","e","preventDefault","alert","autoFocus","type","autoComplete","placeholder","onChange","inputData","target","value","trim","toLowerCase","SearchWrap","Ul","Li","Img","FilmTitle","useSearchParams","searchParam","setSearchParam","search","get","films","setFilms","location","useLocation","filmList","length","useEffect","getFilms","map","film","id","to","state","from","src","poster_path","poster","title"],"sourceRoot":""}